import { Telegraf, Markup } from 'telegraf';
import config from '../config/bot.js';
import pollService from './pollService.js'; 
import adminService from './adminService.js'; 
import * as userController from '../controllers/userController.js'; 

//adminPassword: 'admin123'

class BotService {
  constructor() {
    if (!config.token) {
      throw new Error('Telegram bot token is not provided in config!');
    }
    this.bot = new Telegraf(config.token);
    this.pollCreationState = new Map();
    this.pollTypeState = new Map();
    this.pollEditingState = new Map();
    this.blacklistState = new Map();
    this.adminLoginState = new Map(); 
    this.authorizedAdmins = new Set();
    this.userRequestTimestamps = new Map();

    this.setupMiddlewares();
    this.setupCommands();
    this.setupActions();
  }

  async isAdmin(ctx, next) {
    if (this.authorizedAdmins.has(ctx.from.id)) {
      return next(); 
    }
    await ctx.answerCbQuery('‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ /admin.', true);
    return;
  }

  async showStatsMenu(ctx) {
    try {
      const polls = await pollService.getAllPolls();
      if (polls.length === 0) {
        return ctx.editMessageText('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.', Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_admin')]])).catch(() => {});
      }

      const keyboard = polls.map(poll => {
        const icon = poll.type === 'quiz' ? 'üìù' : 'üìä';
        const status = poll.isActive ? 'üü¢' : 'üî¥';
        const text = `${status} ${icon} ${poll.question.substring(0, 30)}...`;
        return [Markup.button.callback(text, `view_stats_${poll.id}`)];
      });
      keyboard.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_admin')]);

      const message = '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:';
      await ctx.editMessageText(message, Markup.inlineKeyboard(keyboard)).catch(e => {});
    } catch (error) {
      console.error('Error in showStatsMenu:', error);
    }
  }

  async showDetailedStats(ctx, pollId) {
    try {
      const stats = await pollService.getPollStats(pollId);
      if (!stats) return ctx.answerCbQuery('–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!', true);

      let message = `<b>${stats.type === 'quiz' ? 'üìù –í–∏–∫—Ç–æ—Ä–∏–Ω–∞' : 'üìä –û–ø—Ä–æ—Å'}: ${stats.question}</b>\n`;
      message += `–°—Ç–∞—Ç—É—Å: ${stats.isActive ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n\n`;

      if (stats.totalVotes === 0) {
          message += '–ì–æ–ª–æ—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.\n';
      } else {
          message += `–í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: ${stats.totalVotes}\n\n`;
          stats.options.forEach((opt, index) => {
              const percent = stats.totalVotes > 0 ? Math.round((opt.votes / stats.totalVotes) * 100) : 0;
              const isCorrect = stats.type === 'quiz' && !stats.isActive && stats.correctOption === index;
              const correctMark = isCorrect ? ' ‚úÖ (–í–µ—Ä–Ω—ã–π)' : '';
              message += `${index + 1}. ${opt.text}: <b>${opt.votes}</b> (${percent}%)${correctMark}\n`;
          });
      }
      if (stats.type === 'quiz' && stats.isActive) {
        message += '\n<i>‚ùóÔ∏è –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –∏—Ö –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.</i>';
      }

      const keyboard = [
        [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', `view_stats_${pollId}`)],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', 'show_stats_menu')]
      ];
      await ctx.editMessageText(message, { parse_mode: 'HTML', reply_markup: { inline_keyboard: keyboard } }).catch(e => {});
    } catch (error) {
      console.error("Error in showDetailedStats:", error);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', true);
    }
  }

  async showManagementList(ctx) {
    try {
      const polls = await pollService.getAllPolls();
      let message = '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å/–≤–∏–∫—Ç–æ—Ä–∏–Ω—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:';
      const keyboard = [];

      if (polls.length === 0) {
        message = '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.';
      } else {
        polls.forEach(poll => {
          const icon = poll.type === 'quiz' ? 'üìù' : 'üìä';
          const status = poll.isActive ? 'üü¢' : 'üî¥';
          const text = `${status} ${icon} ${poll.question.substring(0, 30)}...`;
          keyboard.push([Markup.button.callback(text, `manage_poll_${poll.id}`)]);
        });
      }
      keyboard.push([Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'manage_polls_list')]);
      keyboard.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_admin')]);

      await ctx.editMessageText(message, Markup.inlineKeyboard(keyboard)).catch(e => {});
    } catch (error) {
      console.error("Error in showManagementList:", error);
    }
  }

  async showSinglePollMenu(ctx, pollId) {
    try {
        const poll = await pollService.getPoll(pollId);
        if (!poll) {
            await ctx.answerCbQuery('–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.', true);
            return this.showManagementList(ctx);
        }

        const message = `–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n<b>${poll.question}</b>`;
        const keyboard = [];

        if (poll.isActive) {
            keyboard.push(
                [Markup.button.callback('üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', `stop_poll_${poll.id}`)],
                [Markup.button.callback('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å', `edit_poll_prompt_${poll.id}`)],
                [Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', `delete_poll_prompt_${poll.id}`)]
            );
        } else {
            keyboard.push([Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ –ë–î', `delete_poll_prompt_${poll.id}`)]);
            message += '\n\n<i>–û–ø—Ä–æ—Å —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ —Ç–æ–ª—å–∫–æ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ –±–∞–∑—ã.</i>'
        }
        
        keyboard.push([Markup.button.callback('üîô –ö —Å–ø–∏—Å–∫—É', 'manage_polls_list')]);

        await ctx.editMessageText(message, {
            parse_mode: 'HTML',
            reply_markup: { inline_keyboard: keyboard }
        });
    } catch (error) {
        console.error('Error in showSinglePollMenu:', error);
    }
  }

  async showBlacklistMenu(ctx) {
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'add_to_blacklist_prompt')],
        [Markup.button.callback('üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫', 'show_blacklist_users')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_admin')]
    ]);
    await ctx.editMessageText('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º:', keyboard).catch(()=>{});
  }

  async showBlacklistedUsers(ctx) {
    const blacklist = await adminService.getBlacklist();
    let message = '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n';
    const keyboard = [];

    if (blacklist.length === 0) {
        message = '–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.';
    } else {
        blacklist.forEach(user => {
            message += `ID: <code>${user.telegramId}</code>\n–ü—Ä–∏—á–∏–Ω–∞: ${user.reason || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n`;
            keyboard.push([Markup.button.callback(
                `üîì –†–∞–∑–±–∞–Ω–∏—Ç—å (${user.telegramId})`, `remove_from_blacklist_${user.telegramId}`
            )]);
        });
    }

    keyboard.push([Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'show_blacklist_users')]);
    keyboard.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'manage_blacklist')]);

    await ctx.editMessageText(message, {
        parse_mode: 'HTML',
        reply_markup: { inline_keyboard: keyboard }
    }).catch(()=>{});
  }

  setupMiddlewares() {    
    this.bot.use(async (ctx, next) => {
      if (!ctx.from || !ctx.from.id) {
        return next(); 
      };

      const userId = ctx.from.id;
      const now = Date.now();
      const lastRequestTime = this.userRequestTimestamps.get(userId);

      if (lastRequestTime) {
        const timeDiff = now - lastRequestTime;
        if (timeDiff < 2000) {
          console.log(`Request from user ${userId} blocked due to spam.`);
          return;
        }
      }

      this.userRequestTimestamps.set(userId, now);
      return next();
    });

    this.bot.use(async (ctx, next) => {
      if (ctx.from) {
        ctx.state.user = await userController.registerUser(ctx.from.id, ctx.from.username, ctx.from.first_name, ctx.from.last_name);
      }
      return next();
    });
  
    this.bot.on('poll_answer', async (ctx) => {
      const { poll_id, user, option_ids } = ctx.pollAnswer;
      const optionIndex = option_ids[0]; 

      const blacklistedUser = await adminService.checkBlacklist(user.id);
      if (blacklistedUser) {
        console.log(`Blocked vote from blacklisted user ${user.id}.`);
        return;
      }
      if (optionIndex !== undefined) {
        await pollService.recordUserVote(poll_id, user.id, optionIndex);
    }
    });
  }

  setupCommands() {
    this.bot.command('start', (ctx) => ctx.reply('–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å /polls –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤ –∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω.'));
    
    this.bot.command('admin', async (ctx) => {
      if (this.authorizedAdmins.has(ctx.from.id)) {
          return this.showMainMenu(ctx);
      }
      this.adminLoginState.set(ctx.from.id, true);
      await ctx.reply('üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:');
  });

    this.bot.command('polls', async (ctx) => {
      try {
        const activePolls = (await pollService.getAllPolls()).filter(p => p.isActive);

        if (activePolls.length === 0) {
          return ctx.reply('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç.');
        }

        await ctx.reply(`–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: ${activePolls.length} –æ–ø—Ä–æ—Å–æ–≤/–≤–∏–∫—Ç–æ—Ä–∏–Ω.`);

        for (const poll of activePolls) {
          if (poll.chatId && poll.messageId) {
            
            const userVote = await pollService.checkUserVote(poll.id, ctx.from.id);
            if (userVote) {
              await ctx.reply(`–í—ã —É–∂–µ –æ—Ç–≤–µ—á–∞–ª–∏ –Ω–∞ –æ–ø—Ä–æ—Å "${poll.question}". –í–æ—Ç –æ–Ω:`);
            }
            
            await ctx.telegram.forwardMessage(ctx.chat.id, poll.chatId, poll.messageId);

          } else {
            console.warn(`Poll ${poll.id} has no messageId. Sending as new.`);
            const options = Object.values(poll.options).map(o => o.text);
            const pollConfig = { is_anonymous: true };
            if (poll.type === 'quiz') {
                pollConfig.type = 'quiz';
                pollConfig.correct_option_id = poll.correctOption;
            } else {
                pollConfig.type = 'regular';
            }
            await ctx.telegram.sendPoll(ctx.chat.id, poll.question, options, pollConfig);
          }
        }

      } catch (error) {
          console.error("Error in /polls command:", error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø—Ä–æ—Å–æ–≤.');
      }
    });
  }

  async showMainMenu(ctx) {
    const message = '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:';
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('–°–æ–∑–¥–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π –æ–ø—Ä–æ—Å', 'create_anonymous_poll'), Markup.button.callback('–°–æ–∑–¥–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É', 'create_quiz')],
      [Markup.button.callback('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞–º–∏', 'manage_polls_list')],
      [Markup.button.callback('–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', 'show_stats_menu'), 
      Markup.button.callback('üö´ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫', 'manage_blacklist')]
    ]);
    if (ctx.callbackQuery) {
        await ctx.editMessageText(message, keyboard).catch(()=>{});
    } else {
        await ctx.reply(message, keyboard);
    }
  }

setupActions() {
    this.bot.on('poll', async (ctx) => {
      try {
        const receivedPoll = ctx.poll;
        const pollId = receivedPoll.id.toString();
        
        const dbPoll = await pollService.getPoll(pollId);
        if (!dbPoll) return;

        const votes = receivedPoll.options.map(opt => opt.voter_count || 0);
        const isClosed = receivedPoll.is_closed;

        await pollService.updatePollStats(pollId, votes, isClosed);
        console.log(`Stats for poll ${pollId} updated. Votes: [${votes.join(', ')}], Is Closed: ${isClosed}`);
        
        if (isClosed && dbPoll.isActive) {
          await this.bot.telegram.sendMessage(config.userId, `üìä –û–ø—Ä–æ—Å "${receivedPoll.question.substring(0, 50)}..." –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.`);
        }
      } catch (error) {
        console.error('Error processing poll update:', error);
      }
    });

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    this.bot.action('back_to_admin', this.isAdmin.bind(this), (ctx) => { 
      this.showMainMenu(ctx); 
      ctx.answerCbQuery(); 
    });
    this.bot.action('manage_polls_list', this.isAdmin.bind(this), async (ctx) => { 
        await this.showManagementList(ctx); 
        await ctx.answerCbQuery(); 
    });

    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    this.bot.action(/^manage_poll_(.+)$/, this.isAdmin.bind(this), async (ctx) => {
      await this.showSinglePollMenu(ctx, ctx.match[1]);
      await ctx.answerCbQuery();
    });

    this.bot.action(/^stop_poll_(.+)$/, this.isAdmin.bind(this), async (ctx) => {
      const pollId = ctx.match[1];
      try {
          const poll = await pollService.getPoll(pollId);
          if (!poll) return ctx.answerCbQuery('–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.', true);
          if (!poll.isActive) return ctx.answerCbQuery('‚ÑπÔ∏è –û–ø—Ä–æ—Å —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.', true);
          if (!poll.chatId || !poll.messageId) return ctx.answerCbQuery('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: —Å—Ç–∞—Ä—ã–π –æ–ø—Ä–æ—Å –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –æ —á–∞—Ç–µ.', true);

          await ctx.telegram.stopPoll(poll.chatId, poll.messageId); 
          await ctx.answerCbQuery('‚úÖ –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!', true);
          await this.showSinglePollMenu(ctx, pollId); 
      } catch (error) {
          let userMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ.';
          if (error.description && error.description.includes('poll has already been closed')) {
              userMessage = '‚ÑπÔ∏è –û–ø—Ä–æ—Å —É–∂–µ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.';
              await pollService.updatePollStats(pollId, [], true); 
          } else {
              console.error("Error stopping poll:", error);
          }
          await ctx.answerCbQuery(userMessage, true);
          await this.showSinglePollMenu(ctx, pollId);
      }
    });

    this.bot.action(/^delete_poll_prompt_(.+)$/, async (ctx) => {
      const pollId = ctx.match[1];
      const keyboard = Markup.inlineKeyboard([
          Markup.button.callback('‚ÄºÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å', `delete_poll_confirm_${pollId}`),
          Markup.button.callback('–û—Ç–º–µ–Ω–∞', `manage_poll_${pollId}`)
      ]);
      await ctx.editMessageText('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ–ø—Ä–æ—Å?\n–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –∏ –≤—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.', keyboard);
      await ctx.answerCbQuery();
    });

    this.bot.action(/^delete_poll_confirm_(.+)$/, async (ctx) => {
    const pollId = ctx.match[1];
    try {
        const poll = await pollService.getPoll(pollId);
        if (!poll) return ctx.answerCbQuery('–û–ø—Ä–æ—Å —É–∂–µ —É–¥–∞–ª–µ–Ω.', true);

        if (poll.chatId && poll.messageId) {
            await ctx.telegram.deleteMessage(poll.chatId, poll.messageId).catch(err => {
                console.warn(`Could not delete message for poll ${pollId}: ${err.message}`);
            });
        }

        await pollService.deletePoll(pollId);
        
        await ctx.answerCbQuery('‚úÖ –û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', true);
        await this.showManagementList(ctx); 

    } catch (error) {
        console.error('Error in delete_poll_confirm:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.', true);
    }
    });

    this.bot.action(/^edit_poll_prompt_(.+)$/, async (ctx) => {
    const pollId = ctx.match[1];
    const poll = await pollService.getPoll(pollId);
    if (!poll) return ctx.answerCbQuery('–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.', true);

    let pollDataString = poll.question;
    const options = Object.values(poll.options).map(opt => opt.text);
    pollDataString += '|' + options.join('|');
    if (poll.type === 'quiz') {
        pollDataString += '|' + poll.correctOption;
    }

    this.pollEditingState.set(ctx.from.id, pollId);

    await ctx.reply(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é:\n\n<code>${pollDataString}</code>`, { parse_mode: 'HTML' });
    await ctx.answerCbQuery('–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é');
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    this.bot.action('show_stats_menu', async (ctx) => { await this.showStatsMenu(ctx); await ctx.answerCbQuery(); });
    this.bot.action(/^view_stats_(.+)$/, async (ctx) => {
        await this.showDetailedStats(ctx, ctx.match[1]);
        await ctx.answerCbQuery();
    });

    // –°–æ–∑–¥–∞–Ω–∏–µ
    this.bot.action('create_quiz', async (ctx) => {
      this.pollTypeState.set(ctx.from.id, 'quiz');
      this.pollCreationState.set(ctx.from.id, true);
      await ctx.editMessageText('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å, –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –∏ –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–Ω–∞—á–∏–Ω–∞—è —Å 0) —á–µ—Ä–µ–∑ "|"\n\n*–ü—Ä–∏–º–µ—Ä:*\n`–°—Ç–æ–ª–∏—Ü–∞ –ë–µ–ª–∞—Ä—É—Å–∏?|–ú–∏–Ω—Å–∫|–ë—Ä–µ—Å—Ç|–ì–æ–º–µ–ª—å|0`', { parse_mode: 'Markdown' });
      await ctx.answerCbQuery();
    });

    this.bot.action('create_anonymous_poll', async (ctx) => {
      this.pollTypeState.set(ctx.from.id, 'anonymous');
      this.pollCreationState.set(ctx.from.id, true);
      await ctx.editMessageText('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ "|"\n\n*–ü—Ä–∏–º–µ—Ä:*\n`–õ—É—á—à–∏–π –≥–æ—Ä–æ–¥?|–ú–∏–Ω—Å–∫|–ë—Ä–µ—Å—Ç|–ì—Ä–æ–¥–Ω–æ`', { parse_mode: 'Markdown' });
      await ctx.answerCbQuery();
    });

    this.bot.action('manage_blacklist', async (ctx) => {
      await this.showBlacklistMenu(ctx);
      await ctx.answerCbQuery();
    });
  
    this.bot.action('show_blacklist_users', async (ctx) => {
        await this.showBlacklistedUsers(ctx);
        await ctx.answerCbQuery();
    });
  
    this.bot.action('add_to_blacklist_prompt', async (ctx) => {
        this.blacklistState.set(ctx.from.id, true);
        await ctx.editMessageText('–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞ —á–µ—Ä–µ–∑ "|".\n\n*–ü—Ä–∏–º–µ—Ä:*\n`123456789|–°–ø–∞–º`', { parse_mode: 'Markdown' });
        await ctx.answerCbQuery();
    });

    this.bot.action(/^remove_from_blacklist_(.+)$/, async (ctx) => {
        const telegramId = ctx.match[1];
        try {
            await adminService.removeFromBlacklist(telegramId);
            await ctx.answerCbQuery(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} —É–¥–∞–ª–µ–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞!`, true);
            await this.showBlacklistedUsers(ctx); 
        } catch (error) {
            console.error('Error removing from blacklist:', error);
            await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.', true);
        }
    });

    this.bot.on('text', async (ctx) => {
      const userId  = ctx.from.id;
      
       // –°–¶–ï–ù–ê–†–ò–ô -1: –í–í–û–î –ü–ê–†–û–õ–Ø
    if (this.adminLoginState.has(userId)) {
      this.adminLoginState.delete(userId);
      const enteredPassword = ctx.message.text;

      // –°—Ç–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      ctx.deleteMessage().catch(() => {});

      if (enteredPassword === config.adminPassword) {
          this.authorizedAdmins.add(userId);
          await ctx.reply('‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω.');
          await this.showMainMenu(ctx);
      } else {
          await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.');
      }
      return;
    }

    if (!this.authorizedAdmins.has(userId)) {
      return;
    }
      // –°–¶–ï–ù–ê–†–ò–ô 0: –î–û–ë–ê–í–õ–ï–ù–ò–ï –í –ß–ï–†–ù–´–ô –°–ü–ò–°–û–ö
      if (this.blacklistState.has(userId)) {
        this.blacklistState.delete(userId);
        try {
            const [telegramId, ...reasonParts] = ctx.message.text.split('|');
            const reason = reasonParts.join('|').trim();
            if (!telegramId || !/^\d+$/.test(telegramId)) {
                throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –£–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.');
            }
            if (!reason) {
                throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.');
            }
            
            await adminService.addToBlacklist(telegramId.trim(), reason);
            await ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>${telegramId.trim()}</code> –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.`, { parse_mode: 'HTML' });
            
            const keyboard = Markup.inlineKeyboard([[Markup.button.callback('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –ß–°', 'manage_blacklist')]]);
            await ctx.reply('–ß—Ç–æ –¥–∞–ª—å—à–µ?', keyboard);

        } catch (error) {
            await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        }
        return;
      }

      // –°–¶–ï–ù–ê–†–ò–ô 1: –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ï–ì–û –û–ü–†–û–°–ê
      if (this.pollEditingState.has(userId)) {
        const pollIdToEdit = this.pollEditingState.get(userId);
        this.pollEditingState.delete(userId);

    try {
        const oldPoll = await pollService.getPoll(pollIdToEdit);
        if (!oldPoll) throw new Error('–ò—Å—Ö–æ–¥–Ω—ã–π –æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.');

        const { question, options, pollConfig, pollType } = this.parsePollData(ctx.message.text, oldPoll.type);

        await ctx.telegram.deleteMessage(oldPoll.chatId, oldPoll.messageId).catch(err => console.warn(`Could not delete old poll message: ${err.message}`));
        
        await pollService.deletePoll(oldPoll.id);

        const sentMessage = await ctx.telegram.sendPoll(oldPoll.chatId, question, options, pollConfig);
        
        await pollService.createPoll(
            sentMessage.poll.id, question, options, pollType,
            pollConfig.correct_option_id, sentMessage.chat.id, sentMessage.message_id
        );
        await ctx.reply('‚úÖ –û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!');
        } catch (error) {
            console.error('Poll editing error:', error);
            await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏: ${error.message}`);
        }
        return;
      }

      // --- –°–¶–ï–ù–ê–†–ò–ô 2: –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –û–ü–†–û–°–ê ---
    if (this.pollCreationState.has(userId)) {
      const pollType = this.pollTypeState.get(userId);
      this.pollCreationState.delete(userId);
      this.pollTypeState.delete(userId);

      try {
          const { question, options, pollConfig } = this.parsePollData(ctx.message.text, pollType);

          const sentMessage = await ctx.telegram.sendPoll(ctx.chat.id, question, options, pollConfig);

          await pollService.createPoll(
              sentMessage.poll.id, question, options, pollType,
              pollConfig.correct_option_id, sentMessage.chat.id, sentMessage.message_id
          );
          await ctx.reply(`‚úÖ ${pollType === 'quiz' ? '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞' : '–û–ø—Ä–æ—Å'} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`);
          } catch (error) {
              console.error('Poll creation error:', error);
              await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏: ${error.message}`);
          }
    }
  });
  }

  parsePollData(text, pollType) {
    const parts = text.split('|').map(s => s.trim());
    const question = parts[0];
    let options, pollConfig = { is_anonymous: true };

    if (pollType === 'anonymous') {
      options = parts.slice(1);
      if (!question || options.length < 2) throw new Error('–ù—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å –∏ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞.');
      pollConfig.type = 'regular';
    } else if (pollType === 'quiz') {
      if (parts.length < 4) throw new Error('–ù—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å, –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏ –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.');
      const correctOptionId = parseInt(parts[parts.length - 1], 10);
      options = parts.slice(1, -1);
      if (isNaN(correctOptionId) || correctOptionId < 0 || correctOptionId >= options.length) {
        throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: –æ—Ç 0 –¥–æ ${options.length - 1}.`);
      }
      pollConfig.type = 'quiz';
      pollConfig.correct_option_id = correctOptionId;
      pollConfig.is_anonymous = true;
    } else {
        throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.');
    }
    return { question, options, pollConfig, pollType };
  }

  start() {
    this.bot.launch().then(() => {
        console.log('Bot started successfully');
        this.bot.telegram.sendMessage(config.userId, '–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. /admin');
    });
  }

  stop() {
    this.bot.stop('SIGINT');
  }
}

const botServiceInstance = new BotService();
export default botServiceInstance;